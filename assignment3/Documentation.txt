Starvation and our solution:
    The theory here to prevent starvation is that every time you go through the entire high priority list
    a single normal priority process should get a turn. The same thing happens for
    normal top low priority.

    So if there is 2 process in the high prio, 3 in normal prio and 1 in low prio, and assuming no process is killed
    the low prio would have to wait for for (2*(3+1))+3 time quantums to have a turn.
    the patern would be "high1, high2, norm1, high1, high2, norm2, high1, high2, norm3, high1, high2, low1, high1, high2, norm1"
                                                                                    the patern repeats here /\     


What the Init process can't do and why it can't do it

    Send - Because it is a blocking command
    receive - Because it is a blocking command
    P_semaphore - Because it is a blocking command
    fork - Because you can only have one init process

Can multiple messages be sent to the same process?
    Yes only one message is receive at a time
    once the sender has been replied to and removed from the sending queue
    the next message can be received.